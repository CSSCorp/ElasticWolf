<?xml version="1.0"?>
<?xml-stylesheet href="chrome://global/skin/" type="text/css"?>
<?xml-stylesheet href="chrome://ew/skin/ew.css" type="text/css"?>
<!DOCTYPE window SYSTEM "chrome://ew/locale/main.dtd">

<dialog xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
  title=""
  buttons="accept,cancel"
  ondialogaccept="return accept();"
  ondialogcancel="return true;"
  onload="init();">

  <script type="application/x-javascript" src="chrome://ew/content/utils.js" />
  <script type="application/x-javascript" src="chrome://ew/content/types.js" />
  <script>
  <![CDATA[

    function init() {
      var reserved = ['id', "type", "label", "value", "fixed", "file", "required", 'key', 'list', 'data', 'obj'];
      this.rc = window.arguments[0];
      this.core = rc.core;
      document.title = rc.title;
      var parent = document.getElementById('main');
      var rows = null;
      for (var i = 0; i < rc.items.length; i++) {
          var title = rc.items[i].label || '';
          var type = rc.items[i].type || 'textbox';
          var value = rc.items[i].value || '';
          var item = null;

          var row = document.createElement('row');
          var box = document.createElement('box');

          switch (type) {
          case 'section':
               rows = createSection(parent, title, rc.items[i].help, rc.items[i]);
               continue;

          case 'dir':
          case 'file':
             rc.items[i].custombox = 1;
             item = document.createElement('textbox');
             box.appendChild(item);
             var button = document.createElement('button');
             button.setAttribute('label', "Browse");
             button.setAttribute('oncommand', "browse('item" + i + "'," + (type == "dir") + ")");
             box.appendChild(button);
             break;

          case 'graph':
             var item = document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas');
             item.setAttribute('class', 'graph');
             item.setAttribute('width', rc.items[i].width || '280');
             item.setAttribute('height', rc.items[i].height || '240');
             box.appendChild(item);
             break;

          case 'image':
             item = document.createElement(type);
             item.setAttribute('src', value);
             break;

          case 'link':
             item = document.createElement('description');
             item.setAttribute('style', 'color:blue');
             item.setAttribute('value', value);
             item.setAttribute('onclick', "rc.core.displayUrl('" + rc.items[i].url + "')");
             break;

          case 'listview':
             item = document.createElement('listbox');
             item.setAttribute('oncommand', "handler(" + i + ")");
             break;

          case 'listbox':
             item = document.createElement(type);
             for (var j in rc.items[i].list) {
                 var obj = rc.items[i].list[j];
                 var e = document.createElement('listitem');
                 e.setAttribute('label', rc.core.toString(obj));
                 e.setAttribute('value', typeof obj == "object" ? obj[rc.items[i].key || "id"] : obj);
                 item.appendChild(e);
             }
             item.setAttribute('value', value);
             item.setAttribute('oncommand', "handler(" + i + ")");
             break;

          case 'menulist':
             item = document.createElement(type);
             var popup = document.createElement('menupopup');
             popup.setAttribute('crop','none');
             item.appendChild(popup);
             if (!rc.items[i].required) {
                 var e = document.createElement('menuitem');
                 popup.appendChild(e);
             }
             for (var j in rc.items[i].list) {
                 var obj = rc.items[i].list[j];
                 var e = document.createElement('menuitem');
                 var v = typeof obj == "object" ? obj[rc.items[i].key || "id"] : obj;
                 e.setAttribute('label', rc.core.toString(obj));
                 e.setAttribute('value', v);
                 popup.appendChild(e);
             }
             item.setAttribute('crop','end');
             item.setAttribute('sizetopopup','none');
             item.setAttribute('value', value);
             item.setAttribute('oncommand', "handler(" + i + ")");
             break;

          case 'radio':
             var item = document.createElement('radiogroup');
             for (var j in rc.items[i].list) {
                 var obj = rc.items[i].list[j];
                 var e = document.createElement('radio');
                 e.setAttribute('label', rc.core.toString(obj));
                 e.setAttribute('value', typeof obj == "object" ? obj[rc.items[i].key || "id"] : obj);
                 item.appendChild(e);
             }
             item.setAttribute('orient', 'horizontal');
             item.setAttribute('value', value);
             item.setAttribute('oncommand', "handler(" + i + ")");
             break;

          case 'password':
             item = document.createElement('textbox');
             item.setAttribute('type', type);
             item.setAttribute('value', value);
             item.setAttribute('onchange', "handler(" + i + ")");
             break;

          case 'number':
             item = document.createElement('textbox');
             item.setAttribute('type', type);
             item.setAttribute('value', value);
             item.setAttribute('size', rc.items[i].size || 5);
             item.setAttribute('onchange', "handler(" + i + ")");
             break;

          case 'cidr':
          case 'ip':
          case 'email':
          case 'textbox':
             item = document.createElement('textbox');
             item.setAttribute('value', value);
             if (!rc.items[i].multiline) {
                 item.setAttribute('size', rc.items[i].size || 45);
             }
             item.setAttribute('onchange', "handler(" + i + ")");
             break;

          case 'name':
          case 'autocomplete':
             item = document.createElement('textbox');
             item.setAttribute('type', 'autocomplete');
             item.setAttribute('value', value);
             item.setAttribute('autocompletesearch', "form-history");
             item.setAttribute('size', rc.items[i].size || 45);
             item.setAttribute('onchange', "handler(" + i + ")");
             break;

          case 'checkbox':
             item = document.createElement('checkbox');
             item.setAttribute('checked', value);
             item.setAttribute('oncommand', "handler(" + i + ")");
             break;

          case 'description':
             item = document.createElement(type);
             item.setAttribute('style', 'white-space:pre-wrap;padding-bottom:5px;');
             item.appendChild(document.createTextNode(value));
             break;

          default:
             item = document.createElement(type);
             item.setAttribute('value', value);
             item.setAttribute('oncommand', "handler(event)");
          }
          rc.items[i].obj = item;
          item.setAttribute('id', 'item' + i);

          for (var p in rc.items[i]) {
              // Ignore our reserved attributes
              if (reserved.indexOf(p) > -1) continue;
              item.setAttribute(p, rc.items[i][p]);
          }

          if (rc.items[i].bold) {
             box.setAttribute('class', 'header');
          }

          // Optional title
          if (!rc.items[i].notitle) {
              var label = document.createElement('label');
              label.setAttribute('value', title + (rc.items[i].required ? "*" : ""));
              label.setAttribute('class', 'header');
              row.appendChild(label);
          }

          // Embed inside the box
          if (!rc.items[i].custombox) {
              if (!rc.items[i].nobox) {
                  box.appendChild(item);
              } else {
                  box = item;
              }
          }

          // This can apply to the box or the item
          if (rc.items[i].fixed) {
             box.setAttribute('autostretch', 'never');
          }

          // For images scale the whole row
          if (rc.items[i].scale) {
              box.setAttribute('flex', '1');
              row.setAttribute('flex', '1');
          }

          // Text on the right
          if (rc.items[i].help) {
             var help = document.createElement('label');
             help.setAttribute('value', rc.items[i].help);
             box.appendChild(help);
          }
          row.appendChild(box);

          // First time, create the title
          if (!rows) {
              rows = createSection(parent, rc.title, rc.help);
          }
          rows.appendChild(row);
      }
      // Call handler on init
      for (var i = 0; i < rc.items.length; i++) {
          handler(i, true);
      }
    }

    function handler(idx, onstart) {
        if (rc.callback) {
            rc.callback.call(this, idx, onstart);
        }
        var obj = rc.items[idx];
        switch (obj.type) {
        case 'graph':
            graph(idx);
            break;

        case 'listview':
            if (onstart) {
                obj.core = this.core;
                obj.name = 'item' + idx;
                if (!obj.items) obj.items = obj.list || [];
                obj.view = new ListView(obj);
            }
            break;
        }
        if (obj.callback) {
            obj.callback.call(this, obj, idx, onstart);
        }
    }

    function graph(idx, list) {
        var obj = rc.items[idx];
        if (!obj.graph) {
            obj.graph = new Graph(obj.label, 'item' + idx, "line");
        }
        obj.graph.reset();
        obj.graph.options.xlabel = obj.xlabel || '';
        if (list) obj.list = list;
        for (var j = 0; j < obj.list.length; j++) {
            obj.graph.addPoint(j, obj.list[j].value, obj.list[j].name);
        }
        obj.graph.draw();
    }

    function browse(id, forDir) {
        if (forDir) {
            path = rc.core.promptForDir("Choose directory:");
        } else {
            path = rc.core.promptForFile("Choose file:");
        }
        if (path) {
            document.getElementById(id).value = path;
        }
    }

    function createHeader(parent, title, help)
    {
        var cap = document.createElement('label');
        cap.setAttribute('style', 'font-weight:bold;text-align:center;padding-bottom:20px;');
        cap.setAttribute('value', title);
        parent.appendChild(cap);

        if (help) {
            parent.appendChild(createDescr(help));
        }
    }

    function createSection(parent, title, descr, rcItem)
    {
        var group = document.createElement('groupbox');
        group.setAttribute('flex', '1');
        group.setAttribute('style', 'padding-bottom: 20px;');
        var cap = document.createElement('caption');
        cap.setAttribute('style', 'text-align:center');
        cap.setAttribute('label', title);
        group.appendChild(cap);

        if (descr) {
            group.appendChild(createDescr(descr));
        }
        if (rcItem) {
            rcItem.obj = group;
        }
        parent.appendChild(group);
        return createGrid(group);
    }

    function createGrid(parent)
    {
        var grid = document.createElement('grid');
        grid.setAttribute('flex', '1');
        var cols = document.createElement('columns');
        cols.setAttribute('flex', '1');
        var col = document.createElement('column');
        cols.appendChild(col);
        col = document.createElement('column');
        col.setAttribute('flex', '1');
        cols.appendChild(col);
        grid.appendChild(cols);
        var rows = document.createElement('rows');
        rows.setAttribute('flex', '1');
        grid.appendChild(rows);
        parent.appendChild(grid);
        return rows;
    }

    function createDescr(descr)
    {
        var text = document.createElement('description');
        text.setAttribute('flex', '1');
        text.setAttribute('style', 'white-space:pre-wrap;padding-bottom:20px;');
        text.textContent = descr;
        return text;
    }

    function accept()
    {
      rc.values = [];
      for (var i = 0; i < rc.items.length; i++) {
          var obj = document.getElementById('item' + i);
          if (!obj) continue;
          var type = rc.items[i].type || 'textbox';
          switch(type) {
          case 'listview':
             rc.items[i].view.done();
             rc.values[i] = rc.items[i].view.selectedItems;
             if (!rc.values[i].length) rc.values[i] = null;
             break;

          case 'checkbox':
             rc.values[i] = obj.checked;
             break;

          case 'cidr':
             rc.values[i] = obj.value;
             if (obj.value && !/[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\/[0-9]+/.test(obj.value)) {
                 alert('Invalid CIDR Block');
                 return false;
             }
             break;

          case 'ip':
             rc.values[i] = obj.value;
             if (obj.value && !/[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/.test(obj.value)) {
                 alert('Invalid IP Address');
                 return false;
             }
             break;

          case 'email':
             rc.values[i] = obj.value;
             if (obj.value && !/([^@]+)@([^@]+)/.test(obj.value)) {
                 alert('Invalid Email Address');
                 return false;
             }
             break;

          case 'name':
             rc.values[i] = obj.value;
             if (obj.value && !/^[\.0-9a-zA-Z_\(\),\/-]{3,128}$/.test(obj.value)) {
                 alert("The name is not formatted properly; it must be 3-128 characters in length containing alphanumerics, parantheses, commas, slashes, dashes, and underscores.");
                 return false;
             }
             break;

          case 'number':
             rc.values[i] = obj.decimalPlaces ? parseFloat(obj.value) : parseInt(obj.value);
             break;

          default:
             rc.values[i] = obj.value;
          }
          // Custom validator
          if (rc.items[i].validate && !rc.items[i].validate(obj.value)) {
              alert(rc.items[i].label + " has invalid data");
              return false;
          }
          // Make sure required fields are not empty
          if (rc.items[i].required && !rc.values[i]) {
             alert(rc.items[i].label + " is required");
             return false;
          }
      }
      rc.ok = true;
      return true;
    }
  ]]>
  </script>
  <vbox id="main" flex="1" />
</dialog>
